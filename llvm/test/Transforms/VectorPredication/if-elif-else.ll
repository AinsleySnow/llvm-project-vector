; NOTE: Assertions have been autogenerated by utils/update_test_checks.py
; RUN: opt -S --passes=vector-predication -o - < %s | FileCheck %s

; ModuleID = 'custom/if-elif-else.c'
source_filename = "custom/if-elif-else.c"
target datalayout = "e-m:e-p:64:64-i64:64-i128:128-n32:64-S128"
target triple = "riscv64-unknown-unknown"

; Input C code:
; void addVec(long N, double *C, double *A, double *B) {
;   long I;
;   for (I = 0; I < N; I++) {
;     if (N < 50)
;       C[I] = A[I] + B[I];
;     else if (N > 75)
;       C[I] = A[I] * B[I];
;     else
;       C[I] = 2 * A[I];
;   }
; }

; Function Attrs: nofree norecurse nosync nounwind memory(argmem: readwrite) vscale_range(2,1024)
define dso_local void @addVec(i64 noundef %N, ptr nocapture noundef writeonly %C, ptr nocapture noundef readonly %A, ptr nocapture noundef readonly %B) local_unnamed_addr #0 {
; CHECK-LABEL: @addVec(
; CHECK-NEXT:  entry:
; CHECK-NEXT:    [[CMP30:%.*]] = icmp sgt i64 [[N:%.*]], 0
; CHECK-NEXT:    br i1 [[CMP30]], label [[FOR_BODY_LR_PH:%.*]], label [[FOR_END:%.*]]
; CHECK:       for.body.lr.ph:
; CHECK-NEXT:    [[CMP1:%.*]] = icmp ult i64 [[N]], 50
; CHECK-NEXT:    [[CMP4:%.*]] = icmp ugt i64 [[N]], 75
; CHECK-NEXT:    [[TMP0:%.*]] = xor i64 [[N]], -1
; CHECK-NEXT:    [[TMP1:%.*]] = call i64 @llvm.vscale.i64()
; CHECK-NEXT:    [[TMP2:%.*]] = call i64 @llvm.umax.i64(i64 [[TMP1]], i64 10)
; CHECK-NEXT:    [[TMP3:%.*]] = icmp ugt i64 [[TMP2]], [[TMP0]]
; CHECK-NEXT:    br i1 [[TMP3]], label [[FOR_BODY_PREHEADER:%.*]], label [[VECTOR_MEMCHECK:%.*]]
; CHECK:       for.body.preheader:
; CHECK-NEXT:    br label [[FOR_BODY:%.*]]
; CHECK:       vector.memcheck:
; CHECK-NEXT:    [[TMP4:%.*]] = shl i64 [[N]], 3
; CHECK-NEXT:    [[UGLYGEP:%.*]] = getelementptr i8, ptr [[C:%.*]], i64 [[TMP4]]
; CHECK-NEXT:    [[UGLYGEP32:%.*]] = getelementptr i8, ptr [[A:%.*]], i64 [[TMP4]]
; CHECK-NEXT:    [[UGLYGEP33:%.*]] = getelementptr i8, ptr [[B:%.*]], i64 [[TMP4]]
; CHECK-NEXT:    [[BOUND0:%.*]] = icmp ugt ptr [[UGLYGEP32]], [[C]]
; CHECK-NEXT:    [[BOUND1:%.*]] = icmp ugt ptr [[UGLYGEP]], [[A]]
; CHECK-NEXT:    [[FOUND_CONFLICT:%.*]] = and i1 [[BOUND0]], [[BOUND1]]
; CHECK-NEXT:    [[BOUND034:%.*]] = icmp ugt ptr [[UGLYGEP33]], [[C]]
; CHECK-NEXT:    [[BOUND135:%.*]] = icmp ugt ptr [[UGLYGEP]], [[B]]
; CHECK-NEXT:    [[FOUND_CONFLICT36:%.*]] = and i1 [[BOUND034]], [[BOUND135]]
; CHECK-NEXT:    [[CONFLICT_RDX:%.*]] = or i1 [[FOUND_CONFLICT]], [[FOUND_CONFLICT36]]
; CHECK-NEXT:    br i1 [[CONFLICT_RDX]], label [[FOR_BODY_PREHEADER]], label [[VECTOR_PH:%.*]]
; CHECK:       vector.ph:
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT37:%.*]] = insertelement <vscale x 1 x i1> poison, i1 [[CMP1]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT38:%.*]] = shufflevector <vscale x 1 x i1> [[BROADCAST_SPLATINSERT37]], <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
; CHECK-NEXT:    [[BROADCAST_SPLATINSERT39:%.*]] = insertelement <vscale x 1 x i1> poison, i1 [[CMP4]], i64 0
; CHECK-NEXT:    [[BROADCAST_SPLAT40:%.*]] = shufflevector <vscale x 1 x i1> [[BROADCAST_SPLATINSERT39]], <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
; CHECK-NEXT:    [[TMP5:%.*]] = xor <vscale x 1 x i1> [[BROADCAST_SPLAT38]], shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer)
; CHECK-NEXT:    [[TMP6:%.*]] = select <vscale x 1 x i1> [[TMP5]], <vscale x 1 x i1> [[BROADCAST_SPLAT40]], <vscale x 1 x i1> zeroinitializer
; CHECK-NEXT:    [[TMP7:%.*]] = select <vscale x 1 x i1> [[BROADCAST_SPLAT38]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> [[BROADCAST_SPLAT40]]
; CHECK-NEXT:    br label [[VECTOR_BODY:%.*]]
; CHECK:       vector.body:
; CHECK-NEXT:    [[INDEX:%.*]] = phi i64 [ 0, [[VECTOR_PH]] ], [ [[INDEX_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[EVL_PHI:%.*]] = phi i64 [ [[N]], [[VECTOR_PH]] ], [ [[EVL_NEXT:%.*]], [[VECTOR_BODY]] ]
; CHECK-NEXT:    [[TMP8:%.*]] = and i64 [[EVL_PHI]], 4294967295
; CHECK-NEXT:    [[VL:%.*]] = call i64 @llvm.riscv.vsetvli.i64(i64 [[TMP8]], i64 3, i64 0)
; CHECK-NEXT:    [[TMP9:%.*]] = trunc i64 [[VL]] to i32
; CHECK-NEXT:    [[TMP10:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_LOAD:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP10]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]]), !tbaa [[TBAA4:![0-9]+]], !alias.scope !8
; CHECK-NEXT:    [[VP_OP:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_LOAD]], <vscale x 1 x double> shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 2.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; CHECK-NEXT:    [[TMP11:%.*]] = getelementptr double, ptr [[B]], i64 [[INDEX]]
; CHECK-NEXT:    [[VP_LOAD41:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP11]], <vscale x 1 x i1> [[TMP6]], i32 [[TMP9]]), !tbaa [[TBAA4]], !alias.scope !11
; CHECK-NEXT:    [[VP_OP2:%.*]] = call <vscale x 1 x double> @llvm.vp.fmul.nxv1f64(<vscale x 1 x double> [[VP_LOAD]], <vscale x 1 x double> [[VP_LOAD41]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; CHECK-NEXT:    [[VP_LOAD42:%.*]] = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr [[TMP11]], <vscale x 1 x i1> [[BROADCAST_SPLAT38]], i32 [[TMP9]]), !tbaa [[TBAA4]], !alias.scope !11
; CHECK-NEXT:    [[VP_OP1:%.*]] = call <vscale x 1 x double> @llvm.vp.fadd.nxv1f64(<vscale x 1 x double> [[VP_LOAD]], <vscale x 1 x double> [[VP_LOAD42]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]])
; CHECK-NEXT:    [[VP_OP4:%.*]] = call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> [[TMP7]], <vscale x 1 x double> [[VP_OP1]], <vscale x 1 x double> [[VP_OP]], i32 [[TMP9]])
; CHECK-NEXT:    [[VP_OP3:%.*]] = call <vscale x 1 x double> @llvm.vp.select.nxv1f64(<vscale x 1 x i1> [[TMP6]], <vscale x 1 x double> [[VP_OP2]], <vscale x 1 x double> [[VP_OP4]], i32 [[TMP9]])
; CHECK-NEXT:    [[TMP12:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[INDEX]]
; CHECK-NEXT:    call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> [[VP_OP3]], ptr [[TMP12]], <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 [[TMP9]]), !tbaa [[TBAA4]], !alias.scope !13, !noalias !15
; CHECK-NEXT:    [[INDEX_NEXT]] = add i64 [[INDEX]], [[VL]]
; CHECK-NEXT:    [[EVL_NEXT]] = sub i64 [[N]], [[INDEX_NEXT]]
; CHECK-NEXT:    [[TMP13:%.*]] = icmp eq i64 [[INDEX_NEXT]], [[N]]
; CHECK-NEXT:    br i1 [[TMP13]], label [[FOR_END_LOOPEXIT44:%.*]], label [[VECTOR_BODY]], !llvm.loop [[LOOP16:![0-9]+]]
; CHECK:       for.body:
; CHECK-NEXT:    [[I_031:%.*]] = phi i64 [ [[INC:%.*]], [[FOR_INC:%.*]] ], [ 0, [[FOR_BODY_PREHEADER]] ]
; CHECK-NEXT:    [[ARRAYIDX:%.*]] = getelementptr inbounds double, ptr [[A]], i64 [[I_031]]
; CHECK-NEXT:    [[TMP14:%.*]] = load double, ptr [[ARRAYIDX]], align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    br i1 [[CMP1]], label [[IF_THEN:%.*]], label [[IF_ELSE:%.*]]
; CHECK:       if.then:
; CHECK-NEXT:    [[ARRAYIDX2:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_031]]
; CHECK-NEXT:    [[TMP15:%.*]] = load double, ptr [[ARRAYIDX2]], align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[ADD:%.*]] = fadd double [[TMP14]], [[TMP15]]
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       if.else:
; CHECK-NEXT:    br i1 [[CMP4]], label [[IF_THEN5:%.*]], label [[IF_ELSE9:%.*]]
; CHECK:       if.then5:
; CHECK-NEXT:    [[ARRAYIDX7:%.*]] = getelementptr inbounds double, ptr [[B]], i64 [[I_031]]
; CHECK-NEXT:    [[TMP16:%.*]] = load double, ptr [[ARRAYIDX7]], align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[MUL:%.*]] = fmul double [[TMP14]], [[TMP16]]
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       if.else9:
; CHECK-NEXT:    [[MUL11:%.*]] = fmul double [[TMP14]], 2.000000e+00
; CHECK-NEXT:    br label [[FOR_INC]]
; CHECK:       for.inc:
; CHECK-NEXT:    [[ADD_SINK:%.*]] = phi double [ [[ADD]], [[IF_THEN]] ], [ [[MUL11]], [[IF_ELSE9]] ], [ [[MUL]], [[IF_THEN5]] ]
; CHECK-NEXT:    [[ARRAYIDX3:%.*]] = getelementptr inbounds double, ptr [[C]], i64 [[I_031]]
; CHECK-NEXT:    store double [[ADD_SINK]], ptr [[ARRAYIDX3]], align 8, !tbaa [[TBAA4]]
; CHECK-NEXT:    [[INC]] = add nuw nsw i64 [[I_031]], 1
; CHECK-NEXT:    [[EXITCOND_NOT:%.*]] = icmp eq i64 [[INC]], [[N]]
; CHECK-NEXT:    br i1 [[EXITCOND_NOT]], label [[FOR_END_LOOPEXIT:%.*]], label [[FOR_BODY]], !llvm.loop [[LOOP20:![0-9]+]]
; CHECK:       for.end.loopexit:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end.loopexit44:
; CHECK-NEXT:    br label [[FOR_END]]
; CHECK:       for.end:
; CHECK-NEXT:    ret void
;
entry:
  %cmp30 = icmp sgt i64 %N, 0
  br i1 %cmp30, label %for.body.lr.ph, label %for.end

for.body.lr.ph:                                   ; preds = %entry
  %cmp1 = icmp ult i64 %N, 50
  %cmp4 = icmp ugt i64 %N, 75
  %0 = xor i64 %N, -1
  %1 = call i64 @llvm.vscale.i64()
  %2 = call i64 @llvm.umax.i64(i64 %1, i64 10)
  %3 = icmp ugt i64 %2, %0
  br i1 %3, label %for.body.preheader, label %vector.memcheck

for.body.preheader:                               ; preds = %vector.memcheck, %for.body.lr.ph
  br label %for.body

vector.memcheck:                                  ; preds = %for.body.lr.ph
  %4 = shl i64 %N, 3
  %uglygep = getelementptr i8, ptr %C, i64 %4
  %uglygep32 = getelementptr i8, ptr %A, i64 %4
  %uglygep33 = getelementptr i8, ptr %B, i64 %4
  %bound0 = icmp ugt ptr %uglygep32, %C
  %bound1 = icmp ugt ptr %uglygep, %A
  %found.conflict = and i1 %bound0, %bound1
  %bound034 = icmp ugt ptr %uglygep33, %C
  %bound135 = icmp ugt ptr %uglygep, %B
  %found.conflict36 = and i1 %bound034, %bound135
  %conflict.rdx = or i1 %found.conflict, %found.conflict36
  br i1 %conflict.rdx, label %for.body.preheader, label %vector.ph

vector.ph:                                        ; preds = %vector.memcheck
  %broadcast.splatinsert37 = insertelement <vscale x 1 x i1> poison, i1 %cmp1, i64 0
  %broadcast.splat38 = shufflevector <vscale x 1 x i1> %broadcast.splatinsert37, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
  %broadcast.splatinsert39 = insertelement <vscale x 1 x i1> poison, i1 %cmp4, i64 0
  %broadcast.splat40 = shufflevector <vscale x 1 x i1> %broadcast.splatinsert39, <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer
  %5 = xor <vscale x 1 x i1> %broadcast.splat38, shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer)
  %6 = select <vscale x 1 x i1> %5, <vscale x 1 x i1> %broadcast.splat40, <vscale x 1 x i1> zeroinitializer
  %7 = select <vscale x 1 x i1> %broadcast.splat38, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), <vscale x 1 x i1> %broadcast.splat40
  br label %vector.body

vector.body:                                      ; preds = %vector.body, %vector.ph
  %index = phi i64 [ 0, %vector.ph ], [ %index.next, %vector.body ]
  %evl.phi = phi i64 [ %N, %vector.ph ], [ %evl.next, %vector.body ]
  %8 = and i64 %evl.phi, 4294967295
  %vl = call i64 @llvm.riscv.vsetvli.i64(i64 %8, i64 3, i64 0)
  %9 = trunc i64 %vl to i32
  %10 = getelementptr inbounds double, ptr %A, i64 %index
  %vp.load = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr %10, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %9), !tbaa !4, !alias.scope !8
  %11 = fmul <vscale x 1 x double> %vp.load, shufflevector (<vscale x 1 x double> insertelement (<vscale x 1 x double> poison, double 2.000000e+00, i64 0), <vscale x 1 x double> poison, <vscale x 1 x i32> zeroinitializer)
  %12 = getelementptr double, ptr %B, i64 %index
  %vp.load41 = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr %12, <vscale x 1 x i1> %6, i32 %9), !tbaa !4, !alias.scope !11
  %13 = fmul <vscale x 1 x double> %vp.load, %vp.load41
  %vp.load42 = call <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr %12, <vscale x 1 x i1> %broadcast.splat38, i32 %9), !tbaa !4, !alias.scope !11
  %14 = fadd <vscale x 1 x double> %vp.load, %vp.load42
  %predphi = select <vscale x 1 x i1> %7, <vscale x 1 x double> %14, <vscale x 1 x double> %11
  %predphi43 = select <vscale x 1 x i1> %6, <vscale x 1 x double> %13, <vscale x 1 x double> %predphi
  %15 = getelementptr inbounds double, ptr %C, i64 %index
  call void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double> %predphi43, ptr %15, <vscale x 1 x i1> shufflevector (<vscale x 1 x i1> insertelement (<vscale x 1 x i1> poison, i1 true, i64 0), <vscale x 1 x i1> poison, <vscale x 1 x i32> zeroinitializer), i32 %9), !tbaa !4, !alias.scope !13, !noalias !15
  %index.next = add i64 %index, %vl
  %evl.next = sub i64 %N, %index.next
  %16 = icmp eq i64 %index.next, %N
  br i1 %16, label %for.end.loopexit44, label %vector.body, !llvm.loop !16

for.body:                                         ; preds = %for.body.preheader, %for.inc
  %I.031 = phi i64 [ %inc, %for.inc ], [ 0, %for.body.preheader ]
  %arrayidx = getelementptr inbounds double, ptr %A, i64 %I.031
  %17 = load double, ptr %arrayidx, align 8, !tbaa !4
  br i1 %cmp1, label %if.then, label %if.else

if.then:                                          ; preds = %for.body
  %arrayidx2 = getelementptr inbounds double, ptr %B, i64 %I.031
  %18 = load double, ptr %arrayidx2, align 8, !tbaa !4
  %add = fadd double %17, %18
  br label %for.inc

if.else:                                          ; preds = %for.body
  br i1 %cmp4, label %if.then5, label %if.else9

if.then5:                                         ; preds = %if.else
  %arrayidx7 = getelementptr inbounds double, ptr %B, i64 %I.031
  %19 = load double, ptr %arrayidx7, align 8, !tbaa !4
  %mul = fmul double %17, %19
  br label %for.inc

if.else9:                                         ; preds = %if.else
  %mul11 = fmul double %17, 2.000000e+00
  br label %for.inc

for.inc:                                          ; preds = %if.then, %if.else9, %if.then5
  %add.sink = phi double [ %add, %if.then ], [ %mul11, %if.else9 ], [ %mul, %if.then5 ]
  %arrayidx3 = getelementptr inbounds double, ptr %C, i64 %I.031
  store double %add.sink, ptr %arrayidx3, align 8, !tbaa !4
  %inc = add nuw nsw i64 %I.031, 1
  %exitcond.not = icmp eq i64 %inc, %N
  br i1 %exitcond.not, label %for.end.loopexit, label %for.body, !llvm.loop !20

for.end.loopexit:                                 ; preds = %for.inc
  br label %for.end

for.end.loopexit44:                               ; preds = %vector.body
  br label %for.end

for.end:                                          ; preds = %for.end.loopexit44, %for.end.loopexit, %entry
  ret void
}

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare i64 @llvm.vscale.i64() #1

; Function Attrs: nocallback nofree nosync nounwind speculatable willreturn memory(none)
declare i64 @llvm.umax.i64(i64, i64) #2

; Function Attrs: nounwind memory(none)
declare i64 @llvm.riscv.vsetvli.i64(i64, i64 immarg, i64 immarg) #3

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(none)
declare <vscale x 1 x i64> @llvm.experimental.stepvector.nxv1i64() #1

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: read)
declare <vscale x 1 x double> @llvm.vp.load.nxv1f64.p0(ptr nocapture, <vscale x 1 x i1>, i32) #4

; Function Attrs: nocallback nofree nosync nounwind willreturn memory(argmem: write)
declare void @llvm.vp.store.nxv1f64.p0(<vscale x 1 x double>, ptr nocapture, <vscale x 1 x i1>, i32) #5

attributes #0 = { nofree norecurse nosync nounwind memory(argmem: readwrite) vscale_range(2,1024) "no-trapping-math"="true" "stack-protector-buffer-size"="8" "target-cpu"="generic-rv64" "target-features"="+64bit,+a,+c,+d,+f,+m,+relax,+v,+zve32f,+zve32x,+zve64d,+zve64f,+zve64x,+zvl128b,+zvl32b,+zvl64b,-e,-experimental-zawrs,-experimental-zca,-experimental-zcb,-experimental-zcd,-experimental-zcf,-experimental-zihintntl,-experimental-ztso,-experimental-zvfh,-h,-save-restore,-svinval,-svnapot,-svpbmt,-xtheadba,-xtheadvdot,-xventanacondops,-zba,-zbb,-zbc,-zbkb,-zbkc,-zbkx,-zbs,-zdinx,-zfh,-zfhmin,-zfinx,-zhinx,-zhinxmin,-zicbom,-zicbop,-zicboz,-zihintpause,-zk,-zkn,-zknd,-zkne,-zknh,-zkr,-zks,-zksed,-zksh,-zkt,-zmmul,-zvl1024b,-zvl16384b,-zvl2048b,-zvl256b,-zvl32768b,-zvl4096b,-zvl512b,-zvl65536b,-zvl8192b" }
attributes #1 = { nocallback nofree nosync nounwind willreturn memory(none) }
attributes #2 = { nocallback nofree nosync nounwind speculatable willreturn memory(none) }
attributes #3 = { nounwind memory(none) }
attributes #4 = { nocallback nofree nosync nounwind willreturn memory(argmem: read) }
attributes #5 = { nocallback nofree nosync nounwind willreturn memory(argmem: write) }

!llvm.module.flags = !{!0, !1, !2}
!llvm.ident = !{!3}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 1, !"target-abi", !"lp64d"}
!2 = !{i32 8, !"SmallDataLimit", i32 8}
!3 = !{!"clang version 17.0.0"}
!4 = !{!5, !5, i64 0}
!5 = !{!"double", !6, i64 0}
!6 = !{!"omnipotent char", !7, i64 0}
!7 = !{!"Simple C/C++ TBAA"}
!8 = !{!9}
!9 = distinct !{!9, !10}
!10 = distinct !{!10, !"LVerDomain"}
!11 = !{!12}
!12 = distinct !{!12, !10}
!13 = !{!14}
!14 = distinct !{!14, !10}
!15 = !{!9, !12}
!16 = distinct !{!16, !17, !18, !19}
!17 = !{!"llvm.loop.mustprogress"}
!18 = !{!"llvm.loop.isvectorized", i32 1}
!19 = !{!"llvm.loop.unroll.runtime.disable"}
!20 = distinct !{!20, !17, !18}
